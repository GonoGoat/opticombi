#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>
#include <sstream>

void incrementerValeursAdjacentes(std::vector<std::vector<int>>& matrice2, int ligne, int colonne, int distance) {
    for (int i = std::max(0, ligne - distance); i < std::min(16, ligne + distance + 1); i++) {
        for (int j = std::max(0, colonne - distance); j < std::min(16, colonne + distance + 1); j++) {
            int distanceActuelle = std::abs(ligne - i) + std::abs(colonne - j);

            if (matrice2[i][j] != "X") {
                matrice2[i][j] += (distance - distanceActuelle);
                if (matrice2[i][j] <= 0) {
                    matrice2[i][j] = "X";
                }
            }
        }
    }
}

int main() {
    std::ifstream fichier("matrice.txt");
    std::vector<std::vector<std::string>> matrice;

    if (fichier.is_open()) {
        std::string ligne;
        while (std::getline(fichier, ligne)) {
            std::vector<std::string> ligneMatrice;
            std::string mot;
            std::istringstream iss(ligne);
            while (iss >> mot) {
                ligneMatrice.push_back(mot);
            }
            matrice.push_back(ligneMatrice);
        }
        fichier.close();
    }

    std::vector<std::string> charset = {"Tu", "D", "Bm", "Wr", "Wl", "Wu", "Wd", "b"};
    std::vector<stdvector<std::string>> matrice2 = matrice;

    for (int i = 0; i < matrice.size(); i++) {
        for (int j = 0; j < matrice[i].size(); j++) {
            bool found = false;
            for (const std::string& character : charset) {
                if (matrice2[i][j] == character) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                matrice2[i][j] = "X";
            }
        }
    }

    std::vector<std::pair<int, int>> coordonneesTu;
    std::vector<std::pair<int, int>> coordonneesB;

    for (int i = 0; i < matrice2.size(); i++) {
        for (int j = 0; j < matrice2[i].size(); j++) {
            if (matrice2[i][j] == "Tu") {
                coordonneesTu.push_back(std::make_pair(i, j));
                std::cout << "Tu en (" << i << ", " << j << ")" << std::endl;
            }
            if (matrice2[i][j] == "b") {
                coordonneesB.push_back(std::make_pair(i, j));
                std::cout << "b en (" << i << ", " << j << ")" << std::endl;
            }
        }
    }

    for (int i = 0; i < matrice2.size(); i++) {
        for (int j = 0; j < matrice2[i].size(); j++) {
            if (matrice2[i][j] != "X") {
                matrice2[i][j] = "0";
            }
        }
    }

    int distance = 20;
    incrementerValeursAdjacentes(matrice2, coordonneesB[0].first, coordonneesB[0].second, distance);

    for (int i = 0; i < matrice2.size(); i++) {
        for (int j = 0; j < matrice2[i].size(); j++) {
            std::cout << matrice2[i][j] << " ";
        }
        std::cout << std::endl;
    }

    return 0;
}
